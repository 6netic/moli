<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
// use Symfony\Component\HttpFoundation\Response;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\TimeType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use App\Entity\Bookings;



class BookingController extends AbstractController {
    
    /**
     * @Route("/", name="booking")
     */
    public function index() {
        return $this->render('booking/index.html.twig');
    }

    /**
     * @Route("/lesdest", name="index_route")
     */
    public function home() {
    	return $this->render('booking/home.html.twig');
    }

    /**
     * @Route("/gares", name="gares_route")
     */
    public function gares() {
        return $this->render('booking/gares.html.twig');
    } 

    /**
     * @Route("/aeroports", name="aeroports_route")
     */
    public function aeroports() {
        return $this->render('booking/aeroports.html.twig');
    } 

    /**
     * @Route("/autre", name="autre_route")
     */
    public function autre() {
        return $this->render('booking/autre.html.twig');
    } 

    /**
     * @Route("/new",
     * name="create_form")
     */
    public function formcreation(Request $request) {
            
            return $this->render('booking/formulaire.html.twig');
    }
    
    /**
     * @Route("/destination/{location}",
     * name="destinations_route", 
     * methods={"GET", "POST"})
     */
    public function destinations($location, ObjectManager $manager, Request $request) { 
        $bookingDate = new Bookings();
        // $prix = new calculTarifs();
        $myForm = $this->createFormBuilder($bookingDate)
            ->add('destination', HiddenType::class, array('data' => $location))
            ->add('departureDate', DateType::class, array('widget' => 'single_text', 'attr' => ['class' => 'form-control']))
            ->add('departureTime', TimeType::class, array(
                'input' => 'string', 'widget' => 'choice', 'minutes' => array(0, 20, 40), 'attr' => ['class' => 'form-control']))
            ->add('sharing', ChoiceType::class, array('choices' => array('Oui' => true, 'Non' => false,),'attr' => ['class' => 'form-control']))
            ->add('save', SubmitType::class, array('attr' => ['class' =>'btn btn-success']))
            ->getForm()
        ;
        $myForm->handleRequest($request);
 
        // Si on a cliqué sur le bouton de soumission
        if ($myForm->isSubmitted() && $myForm->isValid()) {
        // On récupère l'entité par rapport aux critères de recherche   
            $repo = $this->getDoctrine()->getManager()->getRepository(Bookings::class);
        // On récupère les valeurs des champs pour ensuite les afficher   
            $destination = $myForm->getData()->getDestination();
            $laDate = $myForm->getData()->getDepartureDate();
            $bookings = $repo->selDestDate($destination , $laDate);            
        

        // On extrait les heures trouvées
        //   var_dump($bookings); echo 'c la valeur de departureDate<br>';
        
        // If $bookings is defined then 
            if (!empty($bookings)) {
                foreach ($bookings as $booking) {
                    $timeArray[] = $booking->getDepartureTime();
                }
        // On rend les valeurs du tableau uniques
                $timeUniqueArray = array_unique($timeArray);
        // On comptabilise les occurences pour les stocker dans un array associatif
                foreach ($timeUniqueArray as $value) {
                    $nb_passagers[$value] = (count(array_keys($timeArray, $value)));
                }
                
        // Fonction de calcul tarifaire    
                $arrayJoursFeries = array('25-12-2018', '01-01-2019', '22-04-2019', '01-05-2019', '08-05-2019', '30-05-2019', '10-06-2019', '14-07-2019', '15-08-2019', '01-11-2019', '11-11-2019', '25-12-2019', '01-01-2020', '13-01-2020', '01-05-2020', '08-05-2020', '21-05-2020', '31-05-2020', '01-06-2020', '14-07-2020', '15-08-2020', '01-11-2020', '11-11-2020', '25-12-2020', '01-01-2021', '05-04-2021', '01-05-2021', '08-05-2021', '13-05-2021', '24-05-2021', '14-07-2021', '15-08-2021', '01-11-2021', '11-11-2021', '25-12-2021', '01-01-2022', '18-04-2022', '01-05-2022', '08-05-2022', '26-05-2022', '06-06-2022', '14-07-2022', '15-08-2022', '01-11-2022', '11-11-2022', '25-12-2022', '01-01-2023', '10-04-2023', '01-05-2023', '08-05-2023', '29-05-2023', '14-07-2023', '15-08-2023', '01-11-2023', '11-11-2023', '25-12-2023');
                $heure = $myForm->getData()->getDepartureTime();
                $heure = substr($heure, 0, 2); 
                $heure = intval($heure);
                // var_dump($heure); echo '<br>';
                $date = $myForm->getData()->getDepartureDate();
                $jourReservation = date_format($date, 'D');
                $date = date_format($date, 'd/m/Y');
                // var_dump($date); echo '<br>';
                // var_dump($jourReservation);
// ----------------------------------------------------------------------------------            
                // On détermine le tarif kilométrique
                if (($jourReservation == 'Sat') OR ($jourReservation == 'Sun') OR (in_array($date, $arrayJoursFeries))) {
                    $periode = 'Tarification week-ends - jours fériés';
                    $tarifKilometre = 1.61; }
                if ((!$jourReservation == 'Sat') OR (!$jourReservation == 'Sun') AND ($heure >= 8) AND ($heure < 20)) {
                    $periode = 'Tarification semaine en journée';
                    $tarifKilometre = 1.05; }
                if ((!$jourReservation == 'Sat') OR (!$jourReservation == 'Sun') AND ($heure < 8) AND ($heure >= 20)) {
                    $periode = 'Tarification semaine en soirée';
                    $tarifKilometre = 1.56; }
                $distance = array('Gare du Nord' => 51, 'Gare Saint-Lazare' => 47.5, 'Gare de Lyon' => 60, 
                                'Gare Montparnasse' => 60.4, 'Aéroport Charles De Gaulle' => 41.4, 
                                'Aéroport de Beauvais' => 43.2, 'Aéroport Orly' => 80);
                if (array_key_exists($destination, $distance)) { $distance = $distance[$destination]; }
                // else { $varDistance = $_GET['varDistance']; $varDuree = $_GET['varDuree'];
                //    $distance = (int)$_GET['varDistance'];
                //    $distance = ($distance / 1000); }
                
                if ($nb_passagers == 1) { $tauxReduction = 0; }
                if (($nb_passagers > 1) && ($nb_passagers <= 3)) { $tauxReduction = 0.05; }
                if (($nb_passagers > 3) && ($nb_passagers <= 7)) { $tauxReduction = 0.08; }
                if (($nb_passagers > 7) && ($nb_passagers <= 22)) { $tauxReduction = 0.12; }
                if (($nb_passagers > 22) && ($nb_passagers <= 54)) { $tauxReduction = 0.2; }

                $prixCourse = $nb_passagers * (($tarifKilometre * $distance) - (($tarifKilometre * $distance) * $tauxReduction));
                $prixCourse = round($prixCourse, 2);
// -----------------------------------------------------------------------------------

                return $this->render('booking/destinations-test.html.twig', [
                    'heure' => $heure,
                    'location' => $location, 
                    'bookings' => $bookings,
                    'timeValues' => $timeValues,
                    'myForm' => $myForm->createView()
                ]);

            }
            return $this->render('booking/destinations-test.html.twig', [
                'location' => $location, 
                'bookings' => $bookings,
                'myForm' => $myForm->createView()
            ]); 
        }
        else {
            //$prix->prix();
            
            return $this->render('booking/destinations-test.html.twig', [
                    'location' => $location,
                    'firstDisplay' => 'yes',
                    'myForm' => $myForm->createView(),
                ]);
        }
    }

}
