<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
// use Symfony\Component\HttpFoundation\Response;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\TimeType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use App\Entity\Bookings;



class BookingController extends AbstractController {
   
    /**
     * @Route("/", name="booking")
     */
    public function index() {
        return $this->render('booking/index.html.twig');
    }

    /**
     * @Route("/lesdest", name="index_route")
     */
    public function home() {
    	return $this->render('booking/home.html.twig');
    }

    /**
     * @Route("/gares", name="gares_route")
     */
    public function gares() {
        return $this->render('booking/gares.html.twig');
    } 

    /**
     * @Route("/aeroports", name="aeroports_route")
     */
    public function aeroports() {
        return $this->render('booking/aeroports.html.twig');
    } 

    /**
     * @Route("/autre", name="autre_route")
     */
    public function autre() {
        return $this->render('booking/autre.html.twig');
    } 

    /**
     * @Route("/new",
     * name="create_form")
     */
    public function formcreation(Request $request) {
            
            return $this->render('booking/formulaire.html.twig');
    }
    
    /**
     * @Route("/destination/{location}",
     * name="destinations_route", 
     * methods={"GET", "POST"})
     */
    public function destinations($location, ObjectManager $manager, Request $request) { 
        $bookingDate = new Bookings();
        // $prix = new calculTarifs();
        $myForm = $this->createFormBuilder($bookingDate)
            ->add('destination', HiddenType::class, array('data' => $location))
            ->add('departureDate', DateType::class, array('widget' => 'single_text', 'attr' => ['class' => 'form-control']))
            ->add('departureTime', TimeType::class, array(
                'input' => 'string', 'widget' => 'choice', 'minutes' => array(0, 20, 40), 'attr' => ['class' => 'form-control']))
            ->add('sharing', ChoiceType::class, array('choices' => array('Oui' => 'Oui', 'Non' => false,),'attr' => ['class' => 'form-control']))
            ->add('save', SubmitType::class, array('attr' => ['class' =>'btn btn-success']))
            ->getForm()
        ;
        $myForm->handleRequest($request);
 
// Si on a cliqué sur le bouton de soumission
        if ($myForm->isSubmitted() && $myForm->isValid()) {
        // On récupère l'entité par rapport aux critères de recherche   
            $repo = $this->getDoctrine()->getManager()->getRepository(Bookings::class);
        // On récupère les valeurs des champs pour ensuite les afficher   
            $partage = $myForm->getData()->getSharing();
    var_dump($partage); echo 'C la valeur de $partage <br>';
            $destination = $myForm->getData()->getDestination();
            $laDate = $myForm->getData()->getDepartureDate();
    var_dump($laDate); echo 'C la variable $laDate <br>'; // $laDate est un objet date lui
            $heure = $myForm->getData()->getDepartureTime();
            $heure = substr($heure, 0, 2); 
            $heure = intval($heure);
                // var_dump($heure); echo '<br>';
            $date = $myForm->getData()->getDepartureDate();
    var_dump($date); echo ' C la variable $date <br>';        
            $jourReservation = date_format($date, 'D');
            $date = date_format($date, 'd/m/Y');
            $dateRaw = date_format($laDate, 'Y-m-d'); var_dump($dateRaw); echo 'C la valeur de dateRaw <br>';
    var_dump($destination); echo '<br>';
    var_dump($jourReservation); echo 'C le jour de reservation <br>';
    
                // var_dump($jourReservation);
            $arrayJoursFeries = array('01/01/2019', '22/04/2019', '01/05/2019', '08/05/2019', '30/05/2019', '10/06/2019', '14/07/2019', '15/08/2019', '01/11/2019', '11/11/2019', '25/12/2019', '01/01/2020', '13/01/2020', '01/05/2020', '08/05/2020', '21/05/2020', '31/05/2020', '01/06/2020', '14/07/2020', '15/08/2020', '01/11/2020', '11/11/2020', '25/12/2020', '01/01/2021', '05/04/2021', '01/05/2021', '08/05/2021', '13/05/2021', '24/05/2021', '14/07/2021', '15/08/2021', '01/11/2021', '11/11/2021', '25/12/2021', '01/01/2022', '18/04/2022', '01/05/2022', '08/05/2022', '26/05/2022', '06/06/2022', '14/07/2022', '15/08/2022', '01/11/2022', '11/11/2022', '25/12/2022', '01/01/2023', '10/04/2023', '01/05/2023', '08/05/2023', '29/05/2023', '14/07/2023', '15/08/2023', '01/11/2023', '11/11/2023', '25/12/2023');
                // On détermine le tarif kilométrique
            if ($jourReservation === "Mon" or $jourReservation === "Tue" or $jourReservation === "Wed" or $jourReservation === "Thu" or $jourReservation === "Fri") { 
                    if ($heure >= 8 and $heure < 20) { $tarifKilometre = 1.01; }
                    else { $tarifKilometre = 1.56; }
            }               
            if ($jourReservation === "Sat" or $jourReservation === "Sun" or (in_array($date, $arrayJoursFeries))) 
                { $tarifKilometre = 1.61; }
            $distance = array('Gare du Nord' => 51, 'Gare Saint-Lazare' => 47.5, 'Gare de Lyon' => 60, 
                                'Gare Montparnasse' => 60.4, 'Aéroport Charles De Gaulle' => 41.4, 
                                'Aéroport de Beauvais' => 43.2, 'Aéroport d\'Orly' => 80);
            if (array_key_exists($destination, $distance)) { $distance = $distance[$destination]; }
                // else { $varDistance = $_GET['varDistance']; $varDuree = $_GET['varDuree'];
                //    $distance = (int)$_GET['varDistance'];
                //    $distance = ($distance / 1000); }
    var_dump($tarifKilometre); echo '<br>';
    var_dump($distance);  echo '<br>';
 
            $bookings = $repo->selDestDate($destination , $laDate);            
        
        /* A voir tout à l'heure
            if ($partage === 'Oui') { 
                $unique = 'Pas de partage de course';
                var_dump($unique); echo '<br>'; 
            }
        */




        // Si on a au moins une réservation enregistrée à la date sélectionnée alors.... 
            if (!empty($bookings)) {
                foreach ($bookings as $booking) {
                    $timeArray[] = $booking->getDepartureTime();
                }
        // On rend les valeurs du tableau uniques
                $timeUniqueArray = array_unique($timeArray);
        // On comptabilise les occurences pour les stocker dans un array associatif
                foreach ($timeUniqueArray as $value) {
                    $nb_passagers[$value] = (count(array_keys($timeArray, $value)));
                    
        // Insertion du calcul pour chaque horaire différent trouvé.        
            // Fonction de calcul tarifaire 
                    
                    if ($nb_passagers[$value] == 1) { $tauxReduction = 0; }
                    if (($nb_passagers[$value] > 1) and ($nb_passagers[$value] <= 3)) { $tauxReduction = 0.05; }
                    if (($nb_passagers[$value] > 3) and ($nb_passagers[$value] <= 7)) { $tauxReduction = 0.08; }
                    if (($nb_passagers[$value] > 7) and ($nb_passagers[$value] <= 22)) { $tauxReduction = 0.12; }
                    if (($nb_passagers[$value] > 22) and ($nb_passagers[$value] <= 54)) { $tauxReduction = 0.2; }
                var_dump($nb_passagers[$value]); echo '<br>';  
                // var_dump($tauxReduction); echo '<br>';  
                    //$prixCourse = $nb_passagers * (($tarifKilometre * $distance) 
                    //    - (($tarifKilometre * $distance) * $tauxReduction));
                    $prixCourses[$value] = $nb_passagers[$value] * (($tarifKilometre * $distance) - (($tarifKilometre * $distance) * $tauxReduction));
                    
                    $prixCourses[$value] = round($prixCourses[$value], 2);
                    var_dump($prixCourses); echo '<br>'; 
                    var_dump($nb_passagers); echo '<br>';
                }
                return $this->render('booking/destinations-test.html.twig', [
                    'location' => $location, 
                    // 'bookings' => $bookings,
                    'nb_passagers' => $nb_passagers,
                    'prixCourses' => $prixCourses,
                    'laDate' => $laDate,
                    'dateRaw' => $dateRaw,
                     'myForm' => $myForm->createView()
               ]);

            }
        // Calcul du tarif pour un seul passager
            $prixCourse = ($tarifKilometre * $distance);
            $prixCourse = round($prixCourse, 2);
            $hour = $myForm->getData()->getDepartureTime();
            return $this->render('booking/destinations-test.html.twig', [
                'location' => $location, 
                'bookings' => $bookings,
                'prixCourse' => $prixCourse,
                'dateRaw' => $dateRaw,
                'myForm' => $myForm->createView()
            ]); 
 
        }
        else {
            //$prix->prix();
            
            return $this->render('booking/destinations-test.html.twig', [
                    'location' => $location,
                    'firstDisplay' => 'yes',
                    'myForm' => $myForm->createView(),
                ]);
        }
    }

    /**
     * @Route("/recording",
     * name="recording", 
     * methods={"GET", "POST"})
     */
    public function recording(Request $request) { 
        // Afficher les 3 paramètres en dur puis un formulaire en dessous avec nom, prenom, email, CB

        // $request = Request::createFromGlobals(); On en a même pas besoin !
        $location = $request->query->get('location');
        $dateRaw = $request->query->get('dateRaw');
        

        // $dateRaw = new \Datetime($dateRaw);
        // $dateRaw = date_format($dateRaw, 'Y-m-d');
        //$laDate = $request->query->get('laDate');
        //$dateRaw = new \Datetime('2019/12/25');
        var_dump($dateRaw); echo 'C la valeur de $dateRaw <br>';
        // $dateRow = new 
        $horaire = $request->query->get('horaire');
        var_dump($horaire); echo 'C la valeur de $horaire <br>';
        // $repo = $this->getDoctrine()->getManager()->getRepository(Bookings::class);
        // var_dump($location); echo '<br>'; var_dump($date); echo '<br>'; var_dump($horaire); echo '<br>';
        // On affiche le formulaire ici
        $booking = new Bookings();
        $booking->setDepartureDate(new \DateTime($dateRaw));
        $booking->setEmail('cbonpourmoi');
        $booking->setSharing('Oui');
        $myForm = $this->createFormBuilder($booking)
                       ->add('destination', HiddenType::class, array('data' => $location))
                       ->add('departureDate', DateType::class, array('disabled' => true))
                       ->add('departureTime', HiddenType::class, array('data' => $horaire))
                       ->add('firstname', TextType::class, array('attr' => ['class' => 'form-control']))
                       ->add('lastname', TextType::class, array('attr' => ['class' => 'form-control']))
                       ->add('email', TextType::class, array('attr' => ['class' => 'form-control']))
                       ->add('save', SubmitType::class, array('attr' => ['class' =>'btn btn-success']))
                       ->getForm();
        $myForm->handleRequest($request);   
        dump($myForm);
        


// Si le form est submitted
        if ($myForm->isSubmitted() && $myForm->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($booking);
            $em->flush();

            return $this->redirectToRoute('booking'); // Ne pas rediriger vers la page d'acceuil
        }
        
        return $this->render('booking/recording.html.twig', [
                    'location' => $location,
                    'horaire' => $horaire,
                    'dateRaw' => $dateRaw,
                    'myForm' => $myForm->createView(),
                ]);
    }

}




























